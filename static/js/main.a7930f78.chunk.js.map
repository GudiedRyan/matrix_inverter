{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleChange","event","setState","target","name","value","invert","state","det","a","d","b","c","showDet","allowInvert","e","f","g","h","className","onChange","this","placeholder","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPAqFeA,G,wDAjFb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAsDRC,aAAe,SAACC,GACd,EAAKC,SAAL,eACGD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,SAzDpB,EA4DlBC,OAAS,WACP,EAAKJ,UAAS,SAAAK,GAAK,MAAK,CACtBC,IAAKD,EAAME,EAAIF,EAAMG,EAAIH,EAAMI,EAAIJ,EAAMK,EACzCC,SAAS,MAEY,IAAnB,EAAKN,MAAMC,IACb,EAAKN,SAAS,CACZY,aAAa,IAGf,EAAKZ,UAAS,SAAAK,GAAK,MAAK,CACtBO,aAAa,EACbC,EAAGR,EAAME,EAAEF,EAAMC,IACjBQ,EAAGT,EAAMI,EAAEJ,EAAMC,KAAK,EACtBS,EAAGV,EAAMK,EAAEL,EAAMC,KAAK,EACtBU,EAAGX,EAAMG,EAAEH,EAAMC,SAzErB,EAAKD,MAAQ,CACXE,EAAG,GACHE,EAAG,GACHC,EAAG,GACHF,EAAG,GACHF,IAAK,GACLO,EAAE,GACFC,EAAE,GACFC,EAAE,GACFC,EAAE,GACFJ,aAAa,EACbD,SAAS,GAbK,E,qDAiBhB,OACE,yBAAKM,UAAU,QACb,+CACA,yBAAKA,UAAU,UACf,2BAAOA,UAAU,UACX,4BACE,4BAAI,2BAAOC,SAAUC,KAAKrB,aAAcI,KAAK,IAAIkB,YAAY,IAAIjB,MAAOgB,KAAKd,MAAME,KACnF,4BAAI,2BAAOW,SAAUC,KAAKrB,aAAcI,KAAK,IAAIkB,YAAY,IAAIjB,MAAOgB,KAAKd,MAAMI,MAErF,4BACE,4BAAI,2BAAOS,SAAUC,KAAKrB,aAAcI,KAAK,IAAIkB,YAAY,IAAIjB,MAAOgB,KAAKd,MAAMK,KACnF,4BAAI,2BAAOQ,SAAUC,KAAKrB,aAAcI,KAAK,IAAIkB,YAAY,IAAIjB,MAAOgB,KAAKd,MAAMG,QAIvF,6BACF,4BAAQa,QAASF,KAAKf,QAAtB,UACA,6BACA,6BACGe,KAAKd,MAAMM,QAAS,oCAAUQ,KAAKd,MAAMC,KAAW,4BACrD,6BACCa,KAAKd,MAAMO,YACZ,yBAAKK,UAAU,UACb,2BAAOA,UAAU,UACf,4BACE,4BAAKE,KAAKd,MAAMW,GAChB,4BAAKG,KAAKd,MAAMS,IAElB,4BACE,4BAAKK,KAAKd,MAAMU,GAChB,4BAAKI,KAAKd,MAAMQ,MAGb,gG,GAnDHS,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a7930f78.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      a: \"\",\n      b: \"\",\n      c: \"\",\n      d: \"\",\n      det: \"\",\n      e:\"\",\n      f:\"\",\n      g:\"\",\n      h:\"\",\n      allowInvert: false,\n      showDet: false\n    }\n  }\n  render() {\n    return(\n      <div className=\"body\">\n        <h4>Matrix Inverter</h4>\n        <div className=\"vector\">\n        <table className=\"matrix\">\n              <tr>\n                <td><input onChange={this.handleChange} name=\"a\" placeholder=\"a\" value={this.state.a}></input></td>\n                <td><input onChange={this.handleChange} name=\"b\" placeholder=\"b\" value={this.state.b}></input></td>\n              </tr>\n              <tr>\n                <td><input onChange={this.handleChange} name=\"c\" placeholder=\"c\" value={this.state.c}></input></td>\n                <td><input onChange={this.handleChange} name=\"d\" placeholder=\"d\" value={this.state.d}></input></td>\n              </tr>\n            </table>\n            </div>\n            <br />\n          <button onClick={this.invert}>Invert</button>\n          <hr />\n          <div>\n            {this.state.showDet? <p>det = {this.state.det}</p> : <p></p>}\n            <br />\n            {this.state.allowInvert? \n            <div className=\"vector\">\n              <table className=\"matrix\">\n                <tr>\n                  <td>{this.state.h}</td>\n                  <td>{this.state.f}</td>\n                </tr>\n                <tr>\n                  <td>{this.state.g}</td>\n                  <td>{this.state.e}</td>\n                </tr>\n              </table>\n            </div> : <p>If determinant is equal to 0, the matrix is not invertible.</p>}\n          </div>\n      </div>\n    )\n  }\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n  invert = () => {\n    this.setState(state => ({\n      det: state.a * state.d - state.b * state.c,\n      showDet: true\n    }));\n    if (this.state.det === 0) {\n      this.setState({\n        allowInvert: false\n      })\n    } else {\n      this.setState(state => ({\n        allowInvert: true,\n        e: state.a/state.det,\n        f: state.b/state.det*-1,\n        g: state.c/state.det*-1,\n        h: state.d/state.det,\n      }))\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}